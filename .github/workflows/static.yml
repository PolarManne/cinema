name: Deploy static content to Pages  
  
on:  
  push:  
    branches: ["master"]  
  workflow_dispatch:  
  
permissions:  
  contents: read  
  pages: write  
  id-token: write  
  
concurrency:  
  group: "pages"  
  cancel-in-progress: false  
  
jobs:  
  build-and-deploy:  
    environment:  
      name: github-pages  
      url: ${{ steps.deployment.outputs.page_url }}  
    runs-on: ubuntu-latest  
  
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v4  
        with:  
          fetch-depth: 0  
  
      - name: Setup Node.js  
        uses: actions/setup-node@v4  
        with:  
          node-version: '20'  
          # cache: 'npm'  
  
      - name: Enable debug logging  
        run: |  
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV  
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV  
  
      - name: Install dependencies  
        run: |  
          echo "::group::Installing minification tools"  
          INSTALL_START=$(date +%s)  
          npm install -g html-minifier-terser clean-css-cli terser  
          INSTALL_END=$(date +%s)  
          INSTALL_TIME=$((INSTALL_END - INSTALL_START))  
          echo "✓ Dependencies installed in ${INSTALL_TIME}s"  
          echo "::endgroup::"  
  
      - name: Verify public directory  
        run: |  
          echo "::group::Verifying public directory contents"  
          echo "Files in public directory:"  
          find public -type f | head -20  
          TOTAL_FILES=$(find public -type f | wc -l)  
          TOTAL_SIZE=$(find public -type f -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')  
          echo "Total files: $TOTAL_FILES"  
          echo "Total size before optimization: ${TOTAL_SIZE:-0} bytes"  
          echo "::endgroup::"  
  
      - name: Minify HTML files  
        run: |  
          echo "::group::Minifying HTML files in public/"  
          HTML_START=$(date +%s)  
          HTML_ORIGINAL_SIZE=0  
          HTML_NEW_SIZE=0  
          HTML_COUNT=0  
            
          find public -name "*.html" -type f | while read file; do  
            echo "Processing: $file"  
            original_size=$(stat -c%s "$file")  
            HTML_ORIGINAL_SIZE=$((HTML_ORIGINAL_SIZE + original_size))  
              
            html-minifier-terser \  
              --collapse-whitespace \  
              --remove-comments \  
              --remove-optional-tags \  
              --remove-redundant-attributes \  
              --remove-script-type-attributes \  
              --remove-tag-whitespace \  
              --use-short-doctype \  
              --minify-css true \  
              --minify-js true \  
              --output "$file" \  
              "$file"  
              
            new_size=$(stat -c%s "$file")  
            HTML_NEW_SIZE=$((HTML_NEW_SIZE + new_size))  
            savings=$((original_size - new_size))  
            compression_ratio=$(echo "scale=2; $savings * 100 / $original_size" | bc -l)  
            HTML_COUNT=$((HTML_COUNT + 1))  
              
            echo "✓ $file: ${original_size}B → ${new_size}B (saved ${savings}B, ${compression_ratio}% reduction)"  
          done  
            
          HTML_END=$(date +%s)  
          HTML_TIME=$((HTML_END - HTML_START))  
          echo "✓ HTML minification completed in ${HTML_TIME}s"  
          echo "::endgroup::"  
  
      - name: Minify CSS files  
        run: |  
          echo "::group::Minifying CSS files in public/"  
          CSS_START=$(date +%s)  
          CSS_ORIGINAL_SIZE=0  
          CSS_NEW_SIZE=0  
          CSS_COUNT=0  
            
          find public -name "*.css" -type f | while read file; do  
            echo "Processing: $file"  
            original_size=$(stat -c%s "$file")  
            CSS_ORIGINAL_SIZE=$((CSS_ORIGINAL_SIZE + original_size))  
              
            cleancss --output "$file" "$file"  
              
            new_size=$(stat -c%s "$file")  
            CSS_NEW_SIZE=$((CSS_NEW_SIZE + new_size))  
            savings=$((original_size - new_size))  
            compression_ratio=$(echo "scale=2; $savings * 100 / $original_size" | bc -l)  
            CSS_COUNT=$((CSS_COUNT + 1))  
              
            echo "✓ $file: ${original_size}B → ${new_size}B (saved ${savings}B, ${compression_ratio}% reduction)"  
          done  
            
          CSS_END=$(date +%s)  
          CSS_TIME=$((CSS_END - CSS_START))  
          echo "✓ CSS minification completed in ${CSS_TIME}s"  
          echo "::endgroup::"  
  
      - name: Minify JavaScript files  
        run: |  
          echo "::group::Minifying JavaScript files in public/"  
          JS_START=$(date +%s)  
          JS_ORIGINAL_SIZE=0  
          JS_NEW_SIZE=0  
          JS_COUNT=0  
            
          find public -name "*.js" -type f | while read file; do  
            echo "Processing: $file"  
            original_size=$(stat -c%s "$file")  
            JS_ORIGINAL_SIZE=$((JS_ORIGINAL_SIZE + original_size))  
              
            terser "$file" --compress --mangle --output "$file"  
              
            new_size=$(stat -c%s "$file")  
            JS_NEW_SIZE=$((JS_NEW_SIZE + new_size))  
            savings=$((original_size - new_size))  
            compression_ratio=$(echo "scale=2; $savings * 100 / $original_size" | bc -l)  
            JS_COUNT=$((JS_COUNT + 1))  
              
            echo "✓ $file: ${original_size}B → ${new_size}B (saved ${savings}B, ${compression_ratio}% reduction)"  
          done  
            
          JS_END=$(date +%s)  
          JS_TIME=$((JS_END - JS_START))  
          echo "✓ JavaScript minification completed in ${JS_TIME}s"  
          echo "::endgroup::"  
  
      - name: Generate enhanced build report  
        run: |  
          echo "::group::Enhanced Build Summary"  
          BUILD_END=$(date +%s)  
          TOTAL_BUILD_TIME=$((BUILD_END - $(date -d "$(date -R)" +%s)))  
            
          echo "## Enhanced Build Report" >> $GITHUB_STEP_SUMMARY  
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY  
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY  
          echo "| Build Time | ${TOTAL_BUILD_TIME}s |" >> $GITHUB_STEP_SUMMARY  
          echo "| Node.js Version | $(node --version) |" >> $GITHUB_STEP_SUMMARY  
          echo "| Runner OS | $(uname -a) |" >> $GITHUB_STEP_SUMMARY  
          echo "" >> $GITHUB_STEP_SUMMARY  
            
          echo "### File Processing Summary" >> $GITHUB_STEP_SUMMARY  
          echo "| File Type | Count | Original Size | Final Size | Savings | Compression % |" >> $GITHUB_STEP_SUMMARY  
          echo "|-----------|-------|---------------|------------|---------|---------------|" >> $GITHUB_STEP_SUMMARY  
  
          html_count=$(find public -name "*.html" | wc -l)  
          html_size=$(find public -name "*.html" -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')  
          echo "| HTML | $html_count | N/A | ${html_size:-0} bytes | N/A | N/A |" >> $GITHUB_STEP_SUMMARY  
  
          css_count=$(find public -name "*.css" | wc -l)  
          css_size=$(find public -name "*.css" -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')  
          echo "| CSS | $css_count | N/A | ${css_size:-0} bytes | N/A | N/A |" >> $GITHUB_STEP_SUMMARY  
  
          js_count=$(find public -name "*.js" | wc -l)  
          js_size=$(find public -name "*.js" -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')  
          echo "| JavaScript | $js_count | N/A | ${js_size:-0} bytes | N/A | N/A |" >> $GITHUB_STEP_SUMMARY  
  
          total_files=$(find public -type f | wc -l)  
          total_size=$(find public -type f -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')  
          echo "| **Total** | **$total_files** | **N/A** | **${total_size:-0} bytes** | **N/A** | **N/A** |" >> $GITHUB_STEP_SUMMARY  
            
          echo "" >> $GITHUB_STEP_SUMMARY  
          echo "### Performance Metrics" >> $GITHUB_STEP_SUMMARY  
          echo "- Memory usage: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')" >> $GITHUB_STEP_SUMMARY  
          echo "- Disk usage: $(df -h . | tail -1 | awk '{print $3 "/" $2 " (" $5 " used)"}')" >> $GITHUB_STEP_SUMMARY  
          echo "- CPU info: $(nproc) cores available" >> $GITHUB_STEP_SUMMARY  
            
          echo "Build completed successfully with $total_files files totaling $total_size bytes"  
          echo "::endgroup::"  
  
      - name: Setup Pages  
        uses: actions/configure-pages@v5  
  
      - name: Upload artifact  
        uses: actions/upload-pages-artifact@v3  
        with:  
          path: 'public/'  
  
      - name: Deploy to GitHub Pages  
        id: deployment  
        uses: actions/deploy-pages@v4  
  
      - name: Deployment success notification  
        if: success()  
        run: |  
          DEPLOY_END=$(date +%s)  
          echo "::notice::Deployment successful! Site available at ${{ steps.deployment.outputs.page_url }}"  
          echo "::notice::Total workflow runtime: ${DEPLOY_END}s"  
  
      - name: Deployment failure notification  
        if: failure()  
        run: |  
          echo "::error::Deployment failed. Check the logs above for details."  
          echo "::error::Failed at step: ${{ github.job }}"